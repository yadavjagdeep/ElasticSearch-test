                                '''Elasticsearch_Dsl'''

ElasticSearch provides a powerful set of options for querying documents for various usecases

The queries covered here will fall into 2 types:

$: Structured Queries: queries that are used to retrive structured data such as dates, numbers,pin codes etc.

$: Full text Queries: queries that are used to query plain text


"---------------Sample document---------------------------"
{"_index": "employees", "type":"employee", "_id": "1"}
{
    "name": "Jagdeep Yadav",
    "age": 24,
    "salary": "20lpa",
    "hobby": [
        "cricket",
        "books",
        "websearch"
    ],
    "phrase": "Never trust anyone, but try to be nice with people"
}

{"_index": "employees", "type":"employee", "_id": "2"}
{
    "name": "Arnav Yadav",
    "age": 22,
    "salary": "40lpa",
    "hobby": [
        "cricket",
        "girls",
        "websearch"
    ],
    "phrase": "Mind your own bissness, I don't trust any one"
}

{"_index": "employees", "type":"employee", "_id": "3"}
{
    "name": "Zishan Khan",
    "age": 23,
    "salary": "15lpa",
    "hobby": [
        "cricket",
        "girls",
        "sex"
    ],
    "phrase": "I Mind your own bissness"
}

"------------------------------------------------------------"

                ########################## 1: Match Query #######################

The "match" query is one of the most basic and commonly used queries in elasticsearch and functions 
as full text query. We can use this query to search for text, number or boolean values.

e.g: searh word yadav in field name in documents in index employees

POST employees/_search
{
    "query":{
        "match":{
            "name":{
                "query": "yadav"
            }
        }
    }
}

=> This query returns all the documents in which name keyword contains the word "yadav", it does
not matters if it is in upper case or lower case


POST employees/_search
{
    "query":{
        "match":{
            "name":{
                "query": "Jagdeep yadav",
                # "operator": "AND",
                # "minimum_should_match", 2
            }
        }
    }
}

=> This query will return all the documents that have word either "jagdeep" or "yadav" or both in "name"
keyword

=> By default it treats each word as unique and there is "OR" operator between them, we can explicitly
pass operator, can pass "operator": "AND" to match exactly "Jagdeep yadav" in above query


# $ minimum_should_match:
We can set a threshod for minimum amount of matching words the document must contain


                "<---------------------------1.1: Multi-Match Query --------------------------->"

So far we have been dealing with matches on a single field, i.e, we have searched for keywords inside
a single field "name".
We can search for the keywords in multiple fields of the document using 'multi_match' query 


POST employees/_search
{
    "query":{
        "multi_match":{
                "query": "Jagdeep yadav bissness",
                "fields": [
                    "name",
                    "phrase"
                ]
        }
    }
}   

                       "<------------------------ 1.2: Match Phrase ----------------------->"

Match_phrase is another commonly used query, like it's name indicate it matches phrases in a field.

POST employees/_search
{
    "query":{
        "match_phrase":{
            "phrase": {
                "query": "your own bissness"
            }
        }
    }
}

        "<--------------------------- 1.3: Match Phrase Prefix ----------------------->"

The match_phrase_prefix query is similar to the match_phrase query, but here the last term of the 
search keyword is considered as a prefix and is used to match any term starting with that prefix term.

            ################## 2: Term Level Queries ######################

Term level queries are used to query structured data, which would usually be exact values.

=> term query searches for the exact match of the search keyword against the field in the document

e.g: if we seach for keyword "15lpa" against salary field in the above index, we will get the document
in which 'salary' field have value "15lpa" exactly, it is case sensitive

POST employees/_search
{
    "query":{
        "term": {
            "salary": "15lpa"
        }
    }
}

=> we can pass multiple terms keywards using terms query

POST employees/_search
{
    "query":{
        "terms": {
            "salary": ["15lpa"
            ,"20lpa"
            ]
        }
    }
}


            "<--------------------------2.1: Exists Query ------------------------->"

Sometime it happens that there is no indexed value for a field, or field does not exists in the document,
In such cases, exists query helps in identifying such documents

e.g: as in the employee index we don't have any document that have "company" as a field
=> TO list all documents that have company name field
GET employees/_search
{
    "query": {
        "exhists": {
            "field": "company"
        }
    }
}

The above query will list all documents which have field "company"
=> To list all documents without the "company" field
GET employees/_search
{
    "query": {
        "bool": {
            "must_not":{
        "exhists": {
            "field": "company"
            }
        }
    }
}
}


                "<------------------------2.2 Range Queries ------------------------------->"

The Range queries allows us to get the document that contains the terms within an specified range.
Range is a term level query and can be used against numerical fields, data fields etc.

e.g: in the employees index filter out all employee with age between 23 to 25

{
    "query": {
        "range": {
            "age": {
                "gte": 23,
                "lte": 25
            }
        }
    }
}

gte = greater than or equal to
gt = greater than
lte = less than or equal to
lt = less than

            "<--------------------------- 2.3 Id's query ----------------------------->"

It is used when we are needed to fetch document on the basis of their ids
{
    "query": {
        "ids": {
            "values": [
                "2",
                "3"
            ]
        }
    }
}

-> it will fetch the document with id 2 and document with id 3

            "<------------------------Prefix Queries-------------------------------->"

The prefix query is used to fetch documents that contains the given search string as prefix in the specified
field
{
    "query": {
        "prefix": {
            "name": "ja"
        }
    }
}
-> the above query will fetch the document which have name field's value starts with "ja"

                "<---------------------- Wildcard Queries -------------------------->"

Will fetch the documents that have terms that matches the given wild card pattern
e.g: let's search for 2*a pattern using Wildcard query on field "salary"

{
    "query": {
        "wildcard": {
            "salary": {
                "value": "2*a"
            }
        }
    }
}

                        ################ 3: Shorting #######################

Elasticsearch gives us option to sort result on the basis of a field

e.g: let's say we need to sort data on the basis of salary

{
    "_source": [
        "name",
        "salary",
        "age"
    ],
    "sort": [
        {
            "age": {
                "order": "desc"
            }
        }
    ]
}


             ################## Compound Queries ####################

So far we have fired single queries, like finding a text match or finding the age range, etc.
But more often in the real world, we need multiple conditions to be checked and documents are to be returned 
on the basis of that. Compound queries are the queries which helps us to achive this scenario.

               "<---------------- The bool query --------------------------->"

bool query provides a way to combine multiple queries in boolean manner

-> The bool query has mainly 4 types of occurence defined:

$ must: if we have query A and query B in must section, each document in the result would satify both the query,
        ie query A AND query B

$ should: Result = query A OR query B

$ filter: same as must query but score will be ignored

$ must_not: The queries specified must not occur in the documents.

A typical bool query structure would be like:

POST _search
{
  "query": {
    "bool": {
      "must": [],
      "filter": [],
      "must_not": [],
      "should": []
    }
  }
}


# bool query example - must
we need to find all document which have "yadav" in their name and their age greater than 23

{
    "query": {
        "bool": {
            "must": [
                {
                    "match": {
                        "name": "yadav"
                    }
                },
                {
                    "range": {
                        "age": {
                            "gte": 23
                        }
                    }
                }
            ]
        }
    }
}

# bool query example - should
we need to find all documents which have either "yadav" in their name or age greter than 30

{
    "query": {
        "bool": {
            "should": [
                {
                    "match": {
                        "name": "yadav"
                    }
                },
                {
                    "range": {
                        "age": {
                            "gt": 30
                        }
                    }
                }
            ]
        }
    }
}

############################### Refrence ###########################################

url:
https://coralogix.com/blog/42-elasticsearch-query-examples-hands-on-tutorial/
https://user3141592.medium.com/understanding-the-elasticsearch-query-dsl-ce1d67f1aa5b
https://www.tutorialspoint.com/elasticsearch/elasticsearch_query_dsl.htm